StdDev=sd(x),
Low=min(x),
High=max(x))})
trans.stats
g <- ggplot(df.small, aes(mpg))
g <- g + facet_grid(transmission ~ .)
g <- g + geom_histogram(bins = 6)
g
library(ggplot2)
g <- ggplot(df.small, aes(mpg))
g <- g + facet_grid(transmission ~ .)
g <- g + geom_histogram(bins = 6)
g
fit <- lm(mpg ~ transmission, data = df.small)
summary(fit)
plot(fit$residuals)
fit2 <- lm(mpg ~ transmission + weight + num.gears, data = df.small)
summary(fit2)
plot(fit2$residuals)
sort(rownames(mtcars), decreasing = FALSE)
df <- mtcars
#apply recognizable names
names(df) <- c(
"mpg", "cylinders", "displacement", "horsepower", "rear.axle.ration", "weight",
"qtr.mile.interval", "v/s", "transmission", "num.gears", "num.carbs")
#format the transmission variable as a factor
df$transmission <- as.factor(df$transmission)
# convert the 0'1 and 1's to actual names
levels(df$transmission) <- c("Automatic", "Manual")
#format the number of gears as a factor
df$num.gears <- as.factor(df$num.gears)
df.small <- df[,c("mpg","weight", "transmission", "num.gears")]
trans.stats <- tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))})
trans.stats
attr(trans.stats)
attributes(trans.stats)
formula(trans.stats)
str(trans.stats)
trans.stats.f <- formula(tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))}))
help(formula)
formula(trans.stats)
trans.stats.f <- as.formula(tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))}))
trans.stats.f <- as.formula("tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))}))")
trans.stats.f <- as.formula("tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))})")
trans.stats.f <- as.formula("tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))})")
trans.stats.f <- as.formula("tapply(df.small$mpg, df.small$transmission, function(x) {c(Mean=mean(x),Median=median(x),StdDev=sd(x),Low=min(x),High=max(x))})")
trans.stats.f <- as.formula("tapply(df.small$mpg, df.small$transmission, function(x) {c(Mean=mean(x),Median=median(x),StdDev=sd(x),Low=min(x),High=max(x))})")
trans.stats.f <- "tapply(df.small$mpg, df.small$transmission, function(x) {c(Mean=mean(x),Median=median(x),StdDev=sd(x),Low=min(x),High=max(x))})"
trans.stats <- as.formula(trans.stats.f)
x <- "tapply(df.small$mpg, df.small$transmission, function(x) {
c(Mean=mean(x),
Median=median(x),
StdDev=sd(x),
Low=min(x),
High=max(x))})"
as.formula(x)
fit <- lm(mpg ~ transmission, data = df.small)
fit2 <- lm(mpg ~ transmission + weight + num.gears, data = df.small)
resid(fit)
sum(resid(fit))
sum(resid(fit)^2)
sum(resid(fit2)^2)
resid(fit)
sum(resid(fit)^2)
sum(resid(lm(mpg ~ transmission, data = df))^2)
sum(resid(lm(mpg ~ transmission, data = df))^2)
help(mtcars)
sum(resid(lm(mpg ~ transmission, data = df))^2)
sum(resid(lm(mpg ~ transmission + cyl, data = df))^2)
sum(resid(lm(mpg ~ transmission, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ratio, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + v/s, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + "v/s", data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + transmission, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears, data = df))^2)
sum(resid(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears + num.carbs, data = df))^2)
fit$order
fit$effects
summary(fit)
summary(fit2)
lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears + num.carbs, data = df)
summary(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears + num.carbs, data = df))
order(summary(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears + num.carbs, data = df)))
rank(summary(lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears + num.carbs, data = df)))
lm(mpg ~ transmission + cylinders + displacement + horsepower + rear.axle.ration + weight + qtr.mile.interval + num.gears + num.carbs, data = df)$rank
g <- ggplot(df, aes(transmission, mpg))
g <- g + geom_boxplot()
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + geom_boxplot(colour=num.gears)
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + geom_boxplot(aes(colour=num.gears))
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + geom_boxplot(aes(colour=num.gears))
g <- g + geom_boxplot()
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + geom_boxplot()
g <- g + geom_boxplot(aes(colour=num.gears))
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + geom_boxplot(aes(colour=num.gears))
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + ggtitle("MPG by Transmission Type")
g <- g + geom_abline(yintercept = mean(df$mpg))
g <- g + geom_boxplot()
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + ggtitle("MPG by Transmission Type")
g <- g + geom_hline(yintercept = mean(df$mpg))
g <- g + geom_boxplot()
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + ggtitle("MPG by Transmission Type")
g <- g + geom_hline(yintercept = mean(df$mpg), colour = "red")
g <- g + geom_boxplot()
g
g <- ggplot(df, aes(transmission, mpg))
g <- g + ggtitle("MPG by Transmission Type")
g <- g + geom_hline(yintercept = mean(df$mpg), colour = "red")
g <- g + geom_hline(yintercept = median(df$mpg), colour = "green")
g <- g + geom_boxplot()
g
help(plot)
n <- 100; x <- c(10, rnorm(n)); y <- c(10, rnorm(n))
plot(x, y, frame = FALSE, cex = 2, pch =21, bg = "lightblue", col = "black")
abline(lm(y~x))
fit <- lm(y~x)
round(dfbetas(fit)[1:10, 2], 3)
par(mfrow = c(1,3))
plot(0:10, dpois(0:10, lambda = 2), type = "h", frame = FALSE)
plot(0:20, dpois(0:20, lambda = 10), type = "h", frame = FALSE)
plot(0:200, dpois(0:200, lambda = 100), type = "h", frame = FALSE)
swirl()
library("swirl")
SWIRL()
swirl()
rgpl()
rgp1 <- function(){
print("Processing. Please wait.")
# number of samples per simulation
n <- 100
# number of simulations
nosim <- 1000
# set seed for reproducibility
set.seed(4321)
# Point A
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
# Point B
betas <- sapply(1 : nosim, function(i)makelms(x1, x2, x3))
round(apply(betas, 1, var), 5)
}
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data = swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, data = swiss)
vif(mdl2)
xlc <- simbias()
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture)
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, data = swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3)) / 2
n/d
pf(n/d, 2, 43, lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial",data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
bye()
library("swirl")
swirl()
return()
swirl()
var(rpois(1000, 50))
head(hits)
class(hits[,"date"])
as.integer(head(hits[,"date"]))
mdl <- glm(visits ~ date, family = "poisson", data = hits)
summary(mdl)
exp(confint(mdl, "date"))
which.max(hits[,"visits"])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(offset=log(visits+1) ~ date, poisson, hits)
mdl2 <- glm(offset=log(visits+1) ~ date, "poisson", hits)
mdl2 <- glm(I(offset=log(visits+1)) ~ date, "poisson", hits)
mdl <- 0
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
?shuttle
glm(use ~ wind,family = "binomial", data = shuttle)
shuttle
shuttle()
library(MASS)
shuttle()
library("MASS")
glm(use ~ wind,family = "binomial", data = shuttle)
prob(glm(use ~ wind,family = "binomial", data = shuttle))
fit <- glm(use ~ wind,family = "binomial", data = shuttle)
summary(fit)
?glm
anova(fit)
glm(as.factor(spray), family = "poisson", data = InsectSprays)
InsectSprays
help(InsectSprays)
glm(spray, family = "poisson", data = InsectSprays)
glm(count ~ spray, family = "poisson", data = InsectSprays)
2.67415/0.05588
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x, y)
plot(shuttle)
plot(use, wind, data = shuttle)
plot(shuttle$use, shuttle$wind)
sum(shuttle$auto)
str(shuttle)
shut <- shuttle
shut$use=="auto"
which(shut$use=="auto")
length(which(shut$use=="auto"))
shut[which(shut$use=="auto"),"wind"]
summary(shut[which(shut$use=="auto"),"wind"])
setwd("~/GitHub/Santander-Customer-Satisfaction")
setwd("~/GitHub/Santander-Customer-Satisfaction")
df <- read.csv("train.csv", header = TRUE)
df.test <- read.csv("test.csv", header = TRUE)
df$var3
unique(df$var3)
length(unique(df$var3))
length(unique(df[,1]))
length(unique(df[,1:2]))
length(unique(df[,2]))
length(unique(df[,3]))
length(unique(df[,4]))
length(unique(df[,5]))
length(unique(df[,6]))
length(unique(df[,7]))
length(unique(df[,8]))
sapply(1:10, length(unique(df[,x])))
sapply(1:10, function(x) {length(unique(df[,x]))})
sapply(1:371, function(x) {length(unique(df[,x]))})
which(sapply(1:371, function(x) {length(unique(df[,x]))})<10)
summary(df[,21])
unique(df[,21])
df.10s <- which(sapply(1:371, function(x) {length(unique(df[,x]))})<10)
sapply(df.10s, function(x) {unique(x)})
sapply(df.10s, function(x) {unique(df[,x)})
sapply(df.10s, function(x) {unique(df[,x])})
df.2s <- which(sapply(1:371, function(x) {length(unique(df[,x]))})<=2)
sapply(df.2s, function(x) {unique(df[,x])})
class(df$var3)
class(df$var3)=="integer"
class(df$var3)=="logical"
class(df)=="logical"
class(df)
sapply(1:371, function(x) {class(df[,x])})
sapply(1:371, function(x) {class(df[,x])=="integer"})
sapply(1:371, function(x) {class(df[,x])=="integer"|class(df[,x])=="numeric"})
sapply(1:371, function(x) {which(class(df[,x])=="integer"|class(df[,x])=="numeric")})
sapply(1:371, function(x) {class(df[,x])=="integer"|class(df[,x])=="numeric"})
which(sapply(1:371, function(x) {class(df[,x])=="integer"|class(df[,x])=="numeric"}))
df.10s <- which(sapply(non.nums, function(x) {length(unique(df[,x]))})<10)
non.nums <- which(sapply(1:371, function(x) {class(df[,x])=="integer"|class(df[,x])=="numeric"}))
df.10s <- which(sapply(non.nums, function(x) {length(unique(df[,x]))})<10)
df.2s <- which(sapply(non.nums, function(x) {length(unique(df[,x]))})<=2)
sapply(df.2s, function(x) {unique(df[,x])})
df.2s[,1]
df.2s[1]
df[,21] <- as.logical(df[,21])
non.nums <- which(sapply(1:371, function(x) {class(df[,x])=="integer"|class(df[,x])=="numeric"}))
df.10s <- which(sapply(non.nums, function(x) {length(unique(df[,x]))})<10)
df.2s <- which(sapply(non.nums, function(x) {length(unique(df[,x]))})<=2)
sapply(df.2s, function(x) {unique(df[,x])})
non.nums <- which(sapply(1:371, function(x) {class(df[,x])=="integer"|class(df[,x])=="numeric"}))
#df.10s <- which(sapply(non.nums, function(x) {length(unique(df[,x]))})<10)
df.2s <- which(sapply(non.nums, function(x) {length(unique(df[,x]))})<=2)
#unique(df[,21])
#sapply(df.10s, function(x) {unique(df[,x])})
sapply(df.2s, function(x) {unique(df[,x])})
sapply(1:371, function(x) {class(df[,x])=="integer"|class(df[,x])=="numeric"})
which(sapply(1:371, function(x) {class(df[,x])=="integer"|class(df[,x])=="numeric"}))
sapply(non.nums, function(x) {length(unique(df[,x]))})<=2
df.2s <- which(sapply(1:371, function(x) {length(unique(df[,x]))})<=2)
sapply(df.2s, function(x) {unique(df[,x])})
df.2s[2]
df[,21] <- as.logical(df[,22])
df.2s <- which(sapply(1:371, function(x) {length(unique(df[,x]))})<=2)
#unique(df[,21])
#sapply(df.10s, function(x) {unique(df[,x])})
sapply(df.2s, function(x) {unique(df[,x])})
df <- read.csv("train.csv", header = TRUE)
df[,21] <- as.logical(df[,21])
df[,22] <- as.logical(df[,22])
sapply(df.2s, function(x) {unique(df[,x])})
df.2s[5]
df[,25] <- as.logical(df[,25])
sapply(df.2s, function(x) {unique(df[,x])})
df.2s[6]
df[,26] <- as.logical(df[,26])
sapply(df.2s, function(x) {unique(df[,x])})
df.2s[7]
df[,27] <- as.logical(df[,27])
sapply(df.2s, function(x) {unique(df[,x])})
df.2s[7,8,9]
df.2s[c(7,8,9)]
sapply(df.2s, function(x) {unique(df[,x])})
df.2s[c(8,9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)]
df[,21] <- as.logical(df[,21])
df[,22] <- as.logical(df[,22])
df[,25] <- as.logical(df[,25])
df[,26] <- as.logical(df[,26])
df[,27] <- as.logical(df[,27])
df[,28] <- as.logical(df[,28])
df[,29] <- as.logical(df[,29])
df[,30] <- as.logical(df[,30])
df[,31] <- as.logical(df[,31])
df[,32] <- as.logical(df[,32])
df[,33] <- as.logical(df[,33])
df[,34] <- as.logical(df[,34])
df[,35] <- as.logical(df[,35])
df[,36] <- as.logical(df[,36])
df[,37] <- as.logical(df[,37])
df[,38] <- as.logical(df[,38])
df[,39] <- as.logical(df[,39])
df[,40] <- as.logical(df[,40])
df[,41] <- as.logical(df[,41])
df[,42] <- as.logical(df[,42])
df[,43] <- as.logical(df[,43])
df[,44] <- as.logical(df[,44])
df[,45] <- as.logical(df[,45])
df[,46] <- as.logical(df[,46])
df[,47] <- as.logical(df[,47])
df[,48] <- as.logical(df[,48])
df[,49] <- as.logical(df[,49])
df[,50] <- as.logical(df[,50])
df[,51] <- as.logical(df[,51])
df[,52] <- as.logical(df[,52])
df[,53] <- as.logical(df[,53])
df[,54] <- as.logical(df[,54])
sapply(df.2s, function(x) {unique(df[,x])})
df.2s[c(35,36,,37,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,114,115,116,117)]
df.2s[c(35,36,,37,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,114,115,116,117),]
df.2s[c(35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,114,115,116,117),]
df.2s[c(35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,114,115,116,117)]
df[,55] <- as.logical(df[,55])
df[,56] <- as.logical(df[,56])
df[,57] <- as.logical(df[,57])
df[,62] <- as.logical(df[,62])
df[,63] <- as.logical(df[,63])
df[,64] <- as.logical(df[,64])
df[,65] <- as.logical(df[,65])
df[,66] <- as.logical(df[,66])
df[,67] <- as.logical(df[,67])
df[,68] <- as.logical(df[,68])
df[,69] <- as.logical(df[,69])
df[,70] <- as.logical(df[,70])
df[,71] <- as.logical(df[,71])
df[,72] <- as.logical(df[,72])
df[,73] <- as.logical(df[,73])
df[,74] <- as.logical(df[,74])
df[,75] <- as.logical(df[,75])
df[,76] <- as.logical(df[,76])
df[,77] <- as.logical(df[,77])
df[,78] <- as.logical(df[,78])
df[,79] <- as.logical(df[,79])
df[,80] <- as.logical(df[,80])
df[,81] <- as.logical(df[,81])
df[,83] <- as.logical(df[,83])
df[,84] <- as.logical(df[,84])
df[,85] <- as.logical(df[,85])
df[,254] <- as.logical(df[,254])
df[,255] <- as.logical(df[,255])
df[,256] <- as.logical(df[,256])
df[,257] <- as.logical(df[,257])
sapply(df.2s, function(x) {unique(df[,x])})
df.2s[c(118,119,120,121,122,140)]
df[,258] <- as.logical(df[,258])
df[,259] <- as.logical(df[,259])
df[,260] <- as.logical(df[,260])
df[,261] <- as.logical(df[,261])
df[,263] <- as.logical(df[,263])
df[,371] <- as.logical(df[,371])
which(sapply(1:371, function(x) {length(unique(df[,x]))})<=2)
which(sapply(1:371, function(x) {class(df[,x])=="integer"|class(df[,x])=="numeric"}))
non.nums <- which(sapply(1:371, function(x) {class(df[,x])=="integer"|class(df[,x])=="numeric"}))
df.2s <- which(sapply(non.nums, function(x) {length(unique(df[,x]))})<=2)
non.nums <- which(sapply(1:371, function(x) {(class(df[,x])=="integer"|class(df[,x])=="numeric") & length(unique(df[,x]))})<=2}))
non.nums <- which(sapply(1:371, function(x) {(class(df[,x])=="integer"|class(df[,x])=="numeric") & length(unique(df[,x]))<=2}))
sapply(df.2s, function(x) {unique(df[,x])})
sapply(1:371, function(x) {(class(df[,x])=="integer"|class(df[,x])=="numeric") & length(unique(df[,x]))<=2})
summary(df[,23])
summary(df[,307])
unique(df[,307])
setwd("~/GitHub/Santander-Customer-Satisfaction")
df <- read.csv("train.csv", header = TRUE)
df$var3 <- as.factor(df$var3)
df.test$var3 <- as.factor(df.test$var3)
fit5 = lm(formula = TARGET ~ var3 + var15 + imp_op_var40_efect_ult1 +
imp_op_var41_ult1 + ind_var1_0 + ind_var8_0 + ind_var13 +
ind_var18_0 + ind_var24 + ind_var30_0 + ind_var30 + ind_var31_0 +
num_var1_0 + num_var5 + num_var12 + num_var14_0 + num_var42 +
saldo_var1 + saldo_var5 + delta_imp_reemb_var17_1y3 + ind_var43_recib_ult1 +
num_var22_ult1 + num_med_var22_ult3 + num_meses_var5_ult3 +
num_reemb_var17_ult1 + saldo_medio_var8_ult1 + var38, data = df[,
c(2:ncol(df))])
df.test$TARGET <- predict(fit5, df.test)
submission <- df.test[, c("ID", "TARGET")]
submission$TARGET[submission$TARGET<0] <- 0
submission$TARGET[submission$TARGET>1] <- 1
write.csv(submission, "submission.csv", row.names = FALSE)
df$var3 <- as.character(df$var3)
df.test$var3 <- as.character(df.test$var3)
fit5 = lm(formula = TARGET ~ var3 + var15 + imp_op_var40_efect_ult1 +
imp_op_var41_ult1 + ind_var1_0 + ind_var8_0 + ind_var13 +
ind_var18_0 + ind_var24 + ind_var30_0 + ind_var30 + ind_var31_0 +
num_var1_0 + num_var5 + num_var12 + num_var14_0 + num_var42 +
saldo_var1 + saldo_var5 + delta_imp_reemb_var17_1y3 + ind_var43_recib_ult1 +
num_var22_ult1 + num_med_var22_ult3 + num_meses_var5_ult3 +
num_reemb_var17_ult1 + saldo_medio_var8_ult1 + var38, data = df[,
c(2:ncol(df))])
df.test$TARGET <- predict(fit5, df.test)
submission <- df.test[, c("ID", "TARGET")]
submission$TARGET[submission$TARGET<0] <- 0
submission$TARGET[submission$TARGET>1] <- 1
write.csv(submission, "submission.csv", row.names = FALSE)
df$var3 <- as.character(df$var3)
df.test$var3 <- as.character(df.test$var3)
fit5 = lm(formula = TARGET ~ var3 + var15 + imp_op_var40_efect_ult1 +
imp_op_var41_ult1 + ind_var1_0 + ind_var8_0 + ind_var13 +
ind_var18_0 + ind_var24 + ind_var30_0 + ind_var30 + ind_var31_0 +
num_var1_0 + num_var5 + num_var12 + num_var14_0 + num_var42 +
num_var22_ult1 + num_med_var22_ult3 + num_meses_var5_ult3 +
saldo_var1 + saldo_var5 + delta_imp_reemb_var17_1y3 + ind_var43_recib_ult1 +
num_reemb_var17_ult1 + saldo_medio_var8_ult1 + var38, data = df[,
c(2:ncol(df))])
df.test$TARGET <- predict(fit5, df.test)
submission <- df.test[, c("ID", "TARGET")]
setwd("~/GitHub/Santander-Customer-Satisfaction")
df <- read.csv("train.csv", header = TRUE)
df.test <- read.csv("test.csv", header = TRUE)
df$var3 <- as.character(df$var3)
df.test$var3 <- as.character(df.test$var3)
fit5 = lm(formula = TARGET ~ var3 + var15 + imp_op_var40_efect_ult1 +
imp_op_var41_ult1 + ind_var1_0 + ind_var8_0 + ind_var13 +
ind_var18_0 + ind_var24 + ind_var30_0 + ind_var30 + ind_var31_0 +
num_var1_0 + num_var5 + num_var12 + num_var14_0 + num_var42 +
saldo_var1 + saldo_var5 + delta_imp_reemb_var17_1y3 + ind_var43_recib_ult1 +
num_var22_ult1 + num_med_var22_ult3 + num_meses_var5_ult3 +
num_reemb_var17_ult1 + saldo_medio_var8_ult1 + var38, data = df[,
c(2:ncol(df))])
df.test$TARGET <- predict(fit5, df.test)
submission <- df.test[, c("ID", "TARGET")]
submission$TARGET[submission$TARGET<0] <- 0
submission$TARGET[submission$TARGET>1] <- 1
write.csv(submission, "submission.csv", row.names = FALSE)
